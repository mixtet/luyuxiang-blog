import{_ as i,c as a,o as s,a3 as l}from"./chunks/framework.CLEf5sEq.js";const t="/luyuxiang-blog/assets/image-2.DNlRrdHm.png",e="/luyuxiang-blog/assets/image-8.Ct71FhTw.png",T=JSON.parse('{"title":"JWT登录鉴权","description":"","frontmatter":{},"headers":[],"relativePath":"column/LargeFrontEnd2023/200_JWT登录鉴权.md","filePath":"column/LargeFrontEnd2023/200_JWT登录鉴权.md"}'),n={name:"column/LargeFrontEnd2023/200_JWT登录鉴权.md"},p=l(`<h1 id="jwt登录鉴权" tabindex="-1">JWT登录鉴权 <a class="header-anchor" href="#jwt登录鉴权" aria-label="Permalink to &quot;JWT登录鉴权&quot;">​</a></h1><h2 id="鉴权核心概念" tabindex="-1">鉴权核心概念 <a class="header-anchor" href="#鉴权核心概念" aria-label="Permalink to &quot;鉴权核心概念&quot;">​</a></h2><p><code>鉴权</code> ≠ <code>算法/加密</code> ≠ <code>HTTPS</code></p><p>鉴权常见的有以下几种：</p><ul><li>基础鉴权</li><li>session/cookie</li><li><a href="https://jwt.io/libraries" target="_black">JWT</a></li><li>Oauth</li><li>...</li></ul><p>算法/加密有以下几种：</p><ul><li>Base64</li><li>MD5/SHA-1</li><li>DES/AES</li><li>RSA/ECC</li><li>...</li></ul><p>HTTPS 有以下几种：</p><ul><li>SSL</li><li>HTTP劫持</li><li>数据篡改</li><li>敏感信息</li><li>中间人</li><li>...</li></ul><h3 id="常见的鉴权方式的优缺点" tabindex="-1">常见的鉴权方式的优缺点 <a class="header-anchor" href="#常见的鉴权方式的优缺点" aria-label="Permalink to &quot;常见的鉴权方式的优缺点&quot;">​</a></h3><ul><li><p><strong>session/cookie</strong></p><p><strong>优点：</strong></p><ol><li>较易扩展</li><li>简单</li></ol><p><strong>缺点：</strong></p><ol><li>安全性低</li><li>性能低，服务端存储</li><li>多服务器同步session困难</li><li>跨平台困难</li></ol></li><li><p><strong>JWT</strong></p><p><strong>优点：</strong></p><ol><li>易扩展</li><li>支持移动设备</li><li>跨应用调用</li><li>安全</li><li>承载信息丰富</li></ol><p><strong>缺点：</strong></p><ol><li>刷新与过期处理</li><li>Payload不易过大</li><li>中间人攻击</li></ol></li><li><p><strong>Oauth</strong></p><p><strong>优点：</strong></p><ol><li>开放</li><li>安全</li><li>筒单</li><li>权限指定</li></ol><p><strong>缺点：</strong></p><ol><li>需要增加授权服务器</li><li>增加网络请求</li></ol></li></ul><h2 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h2><p>JWT的全称是 JSON Web Token，一个 JWT 由三部分构成：Header, Payload, Signature。</p><blockquote><p>什么是JWT</p></blockquote><p>由三部分构成：Header, Payload, Signature。</p><ul><li>Header</li></ul><p>规定token使用的加密方式及类型</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Payload</li></ul><p>包含一些用户信息，及过期时间</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2019-10-01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brian&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Signature</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HMACSHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(header) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload),secret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="jwt特点" tabindex="-1">JWT特点 <a class="header-anchor" href="#jwt特点" aria-label="Permalink to &quot;JWT特点&quot;">​</a></h3><ul><li>防CSRF（主要是伪造请求，带上Cookie）</li><li>适合移动应用（app）</li><li>无状态，编码数据</li></ul><p>典型的JWT的样子</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>eyJhbGcioiJlUzI1NilsInR5cCI6lkpxVCJg.eyJzdWIiOilyMDE5LTEw</span></span>
<span class="line"><span>LTAxliwibmFtZSI6IkJyaWFuliwiYWRtaW4iOnRydWV9.P*pbeBetG</span></span>
<span class="line"><span>hwmncStOR8udlPvogVOHnFZojHInjlRinQ</span></span></code></pre></div><h3 id="jwt工作原理" tabindex="-1">JWT工作原理 <a class="header-anchor" href="#jwt工作原理" aria-label="Permalink to &quot;JWT工作原理&quot;">​</a></h3><p><img src="`+t+'" alt="alt text"></p><h2 id="算法-加密" tabindex="-1">算法/加密 <a class="header-anchor" href="#算法-加密" aria-label="Permalink to &quot;算法/加密&quot;">​</a></h2><p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和初始输入（可能为空）开始，经过一系系列有限而清晰定义的状态最终产生输出并停止于一个终态。</p><p>数据加密的基本过程，就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为“密文〞。通过这样的途径，来达到保护数据不被非法人窃取、阅读的目的。</p><p><img src="'+e+'" alt="alt text"></p><h2 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h2><p>HTTPS (HyperText Transfer Protocol Secure)超文本传输安全协议，常称为HTTP over TLS、 HTTP over SSL或HTTP Secure）是—种通过计算机网络进行安全通信的传输协议。</p><h3 id="api安全设计" tabindex="-1">API安全设计 <a class="header-anchor" href="#api安全设计" aria-label="Permalink to &quot;API安全设计&quot;">​</a></h3><ul><li>通信信道加密：使用HTTPS</li><li>通信数据加密：密文 + 加密关键数据</li><li>通信安全策略：授权中间层、尝试次数、过期策略..</li></ul><h3 id="提高jvt安全性的策略" tabindex="-1">提高JVT安全性的策略 <a class="header-anchor" href="#提高jvt安全性的策略" aria-label="Permalink to &quot;提高JVT安全性的策略&quot;">​</a></h3><ul><li>使用HTTPS</li><li>服务端存储Secret，动态Secret</li><li>设置短期的Token有效，设置刷新Token</li></ul><h1 id="nodejs" tabindex="-1">nodejs <a class="header-anchor" href="#nodejs" aria-label="Permalink to &quot;nodejs&quot;">​</a></h1><h2 id="npm-run-all" tabindex="-1">npm-run-all <a class="header-anchor" href="#npm-run-all" aria-label="Permalink to &quot;npm-run-all&quot;">​</a></h2><p>可以运行多个npm命令</p><p><a href="https://www.npmjs.com/package/npm-run-all" target="_blank" rel="noreferrer">https://www.npmjs.com/package/npm-run-all</a></p><p>讨论描述：</p><p>登录鉴权的方式，我们课程中采用的是JWT的方案，而在一些大型的系统中，会考虑cookie/session + 单点登录的方案。什么是单点登录？</p><p>单点登录（Single Sign On），简称为SSO，是比较流行的企业业务整合的解决方案之一。 SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p>如果用Node来实现单点登录，我们需要考虑什么？</p><p>思路和点拨：</p><p>首页，我们应该了解单点登录解决的问题是什么，应用场景是什么？</p><p>公司项目中如果有单点登录的场景，与后台人员讨论单点登录的原理。之后，针对 Node服务来设计单点登录时，应该考虑的技术栈，从koa&amp;express这些基础的框架出发，看看有没有比较成熟的技术栈，然后再从上层框架Egg.js，nestjs等，来选择合适的方案。确定方案后，构建最小的闭环，测试单点登录的实现。</p><p>常见的坑点：</p><p>a. 前端无法访问cookie b. 如何透传cookie c. 多个域名如何解决跨域问题</p><p>单点登录失败的原因：</p><p>a.跨域请求被浏览器拦截 b.服务器未及时响应（超时） c.请求被浏览器插件拦截 d.该数据直接采用了缓存，并没有发送请求</p>',54),o=[p];function h(r,d,k,c,u,g){return s(),a("div",null,o)}const b=i(n,[["render",h]]);export{T as __pageData,b as default};
