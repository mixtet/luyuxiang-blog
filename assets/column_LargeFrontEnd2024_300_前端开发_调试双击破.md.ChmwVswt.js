import{_ as a,c as e,o as s,a3 as n}from"./chunks/framework.DWERMQXc.js";const g=JSON.parse('{"title":"nvm 常用命令总结","description":"","frontmatter":{},"headers":[],"relativePath":"column/LargeFrontEnd2024/300_前端开发&调试双击破.md","filePath":"column/LargeFrontEnd2024/300_前端开发&调试双击破.md"}'),i={name:"column/LargeFrontEnd2024/300_前端开发&调试双击破.md"},t=n(`<h1 id="nvm-常用命令总结" tabindex="-1">nvm 常用命令总结 <a class="header-anchor" href="#nvm-常用命令总结" aria-label="Permalink to &quot;nvm 常用命令总结&quot;">​</a></h1><ul><li>nvm list 查看已经安装的版本</li><li>nvm list installed 查看已经安装的版本</li><li>nvm list available 查看网络可以安装的版本</li><li>nvm version 查看当前的版本</li><li>nvm install 安装最新版本 nvm</li><li>nvm use &lt;version&gt; ## 切换使用指定的版本 node</li><li>nvm ls 列出所有版本</li><li>nvm current 显示当前版本</li><li>nvm alias &lt;name&gt;&lt;version&gt; ## 给不同的版本号添加别名</li><li>nvm unalias &lt;name&gt; ## 删除已定义的别名</li><li>nvm reinstall-packages &lt;version&gt; ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</li><li>nvm on 打开 nodejs 控制</li><li>nvm off 关闭 nodejs 控制</li><li>nvm proxy 查看设置与代理</li><li>nvm node_mirror [url] 设置或者查看 setting.txt 中的 node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noreferrer">https://nodejs.org/dist/</a></li><li>nvm npm_mirror [url] 设置或者查看 setting.txt 中的 npm_mirror,如果不设置的话默认的是： <a href="https://github.com/npm/-" target="_blank" rel="noreferrer">https://github.com/npm/-</a> npm/archive/.</li><li>nvm uninstall &lt;version&gt; 卸载制定的版本</li><li>nvm root [path] 设置存储不同版本 node 的目录。如果未设置，默认使用当前目录</li><li>nvm arch 显示 node 是运行在 32 位还是 64 位。</li><li>nvm install &lt;version&gt; [arch] 安装 node， version 是特定版本也可以是最新稳定版本 latest。可选参数 arch 指定安装 32 位还是 64 位版本，默认是系统位数。可以添加--insecure 绕过远程服务器的 SSL。</li><li>nvm ls-remote 查看远程</li></ul><p>LTS 长期支持版本</p><h1 id="跨平台终端" tabindex="-1">跨平台终端 <a class="header-anchor" href="#跨平台终端" aria-label="Permalink to &quot;跨平台终端&quot;">​</a></h1><h2 id="_1-tabby-推荐" tabindex="-1">1. Tabby （推荐） <a class="header-anchor" href="#_1-tabby-推荐" aria-label="Permalink to &quot;1. Tabby （推荐）&quot;">​</a></h2><p>官网链接：https:/tabby.sh</p><p>收费情况：免费</p><p>Tabby 是一款跨平台的现代化终端应用程序，它支持分屏、多标签、自动完成、主题等功能。它还具有一个内置的 描件系统，可以扩展其功能。Tabby 使用 Rust 语言编写，可以在 Windows、macoS 和 Linux 等多个操作系统上使 用。</p><h2 id="_2-windterm" tabindex="-1">2. WindTerm <a class="header-anchor" href="#_2-windterm" aria-label="Permalink to &quot;2. WindTerm&quot;">​</a></h2><p>官网链接：httpsi/Lgithub.com/kingToolbox/indTerm</p><p>收费情况：免费</p><p>WindTerm 是一款跨平台的终端应用程序，它支持 Windows、 macoS 和 Linux 等多个操作系统。它具有分屏、多标 签、主题、自动完成等功能，还支持自定义快捷键。WindTerm 使用 Electron 构建，具有良好的用户体验。</p><h2 id="_3-hyper" tabindex="-1">3. Hyper <a class="header-anchor" href="#_3-hyper" aria-label="Permalink to &quot;3. Hyper&quot;">​</a></h2><p>官网链接：<a href="https://hyper.is" target="_blank" rel="noreferrer">https://hyper.is</a></p><p>收费情况：免费</p><p>Hyper 是一款跨平台终端应用程序，它基于 Web 技术构建，可以使用 JavaScript、CSS 和 HTML 自定义界面和插件。 它支持分屏、主题、自动完成和键盘快捷键等功能，而且还有一个内置的插件管理器，可以轻松安装和卸载插件。</p><h2 id="_4-termius" tabindex="-1">4. Termius <a class="header-anchor" href="#_4-termius" aria-label="Permalink to &quot;4. Termius&quot;">​</a></h2><p>官网链接：<a href="https://termius.com" target="_blank" rel="noreferrer">https://termius.com</a></p><p>Termius 是一款跨平台的 SSH 客户端，支持 macos、 Windows、 Linux、 iOS 和 Android，一般在 macQS 和 Linux 上 使用的是自带的 SSH 客户端，Windows 上使用的 putty 会比较多一点，所以大家对 Temis 风能了解不多。</p><h1 id="macos-终端" tabindex="-1">macOS 终端 <a class="header-anchor" href="#macos-终端" aria-label="Permalink to &quot;macOS 终端&quot;">​</a></h1><h2 id="_1-zsh" tabindex="-1">1. Zsh <a class="header-anchor" href="#_1-zsh" aria-label="Permalink to &quot;1. Zsh&quot;">​</a></h2><p>官网链接：<a href="https://www.zsh.org/" target="_blank" rel="noreferrer">https://www.zsh.org/</a></p><p>收费情况：免费</p><p>Zsh 是一款开源的、高度可定制的终端应用程序，它是 macoS 的默认 shel。Zsh 具有很多高级功能，例如自动完 成、命令历史记录、别名、函数等等。它还支持主题和插件，可以通过安装 Oh My Zsh 等工具进行扩展。</p><h2 id="_2-fishshell" tabindex="-1">2. FishShell <a class="header-anchor" href="#_2-fishshell" aria-label="Permalink to &quot;2. FishShell&quot;">​</a></h2><p>官网链接：<a href="https://fishshell.com" target="_blank" rel="noreferrer">https://fishshell.com</a></p><p>收费情况：免费</p><p>Fish 是一款开源的、现代化的终端应用程序，它具有很多高级功能，例如自动完成、语法高亮、命令历史记录、别 名、函数等等。Fish 还有一个内置的插件管理器，可以轻松安装和卸载插件。Fish 在 macos 上的用户体验非常 好，但与其他 shell 不兼容。</p><h2 id="_3-iterm2" tabindex="-1">3. iTerm2 <a class="header-anchor" href="#_3-iterm2" aria-label="Permalink to &quot;3. iTerm2&quot;">​</a></h2><p>官网链接：<a href="https://iterm2.com" target="_blank" rel="noreferrer">https://iterm2.com</a></p><p>收费情况：免费</p><p>iTerm2 是 macos 下最受欢迎的终端应用之一，它是 Terminal 的替代品。它支持多窗口和分屏功能，可以自定义主 题和快捷键，而且还有许多其他实用的功能，例如标签页、自动完成、自动保存会话等等。</p><h2 id="其他终端" tabindex="-1">其他终端 <a class="header-anchor" href="#其他终端" aria-label="Permalink to &quot;其他终端&quot;">​</a></h2><p>Starship</p><p>终端美化神器：</p><p>地址：<a href="https://starship.rs/zh-CN" target="_blank" rel="noreferrer">https://starship.rs/zh-CN</a></p><p>fig</p><p>命令提示工具</p><p>地址：<a href="https://fig.io" target="_blank" rel="noreferrer">https://fig.io</a></p><h1 id="语义化的版本号" tabindex="-1">语义化的版本号 <a class="header-anchor" href="#语义化的版本号" aria-label="Permalink to &quot;语义化的版本号&quot;">​</a></h1><p><span style="color:red;"> semver </span> 是语义化版本（<a target="_blank" href="https://semver.org/lang/zh-CN/">Semantic Versioning</a>）规范的一个实现，目前是由 npm 的团队维护，实现了版本和版本范围的解析、计算、比较。</p><h2 id="版本名称释义" tabindex="-1">版本名称释义 <a class="header-anchor" href="#版本名称释义" aria-label="Permalink to &quot;版本名称释义&quot;">​</a></h2><ul><li>alpha: 内部测试版本，除非是内部测试人员，否则不推荐使用，有很多Bug</li><li>beta: 公测版本，消除了严重错误，还是会有缺陷，这个阶段还会持续加入新的功能</li><li>rc: Release Candidate，发行侯选版本。这个版本不会加入新的功能，主要是排错，修改Bug</li><li>release</li></ul><p>npm 版本命令</p><ul><li>npm version</li><li>参数--preid的作用</li><li>premajor, preminor, prepatch</li></ul><h1 id="npm-发包过程文档" tabindex="-1">NPM 发包过程文档 <a class="header-anchor" href="#npm-发包过程文档" aria-label="Permalink to &quot;NPM 发包过程文档&quot;">​</a></h1><p>发布自己的包或插件到npm中，这样别人就可以下载自己的包和插件了</p><p>查看npm源，是阿里的/腾讯的</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config get registry</span></span></code></pre></div><p>输出 <code>https://registry.npmjs.org/</code> 就是官方的源</p><p>本文档将介绍如何发布一个包到 NPM (Node Package Manager) 的过程。这里假设你己经拥有一个待发布的 Node.js 项目。以下是发布 NPM 包的详细步骤：</p><h2 id="_1-准备工作" tabindex="-1">1. 准备工作 <a class="header-anchor" href="#_1-准备工作" aria-label="Permalink to &quot;1. 准备工作&quot;">​</a></h2><p>确保你的项目满足以下条件：</p><ul><li>已经安装了 Node.js 和 NPM。如果还没有安装，请访问 Nodejs 官网 下载并安装。</li><li>项目有一个 package.json 文件。如果没有，你可以通过运行 npm init 来创建一个。</li></ul><h2 id="_2-更新-package-json-文件" tabindex="-1">2. 更新 package.json 文件 <a class="header-anchor" href="#_2-更新-package-json-文件" aria-label="Permalink to &quot;2. 更新 package.json 文件&quot;">​</a></h2><p>确保你的 package. json 文件包含以下信息：</p><ul><li><code>name</code>：包名，确保是全局唯一的(小写英文 + 短横线)，eg: @vue/use, @后面跟组织主要的。</li><li><code>version</code>：当前包版本，遵循 Semantic Versioning 规范。</li><li><code>main</code>：包的入口文件。</li><li><code>scripts</code>：包中可执行的脚本。</li><li><code>dependencies</code> 和 <code>devDependencies</code>：包所依赖的其他包。</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;your-package-name&quot;,</span></span>
<span class="line"><span>    &quot;version&quot;: &quot;1.0.0&quot;,</span></span>
<span class="line"><span>    &quot;main&quot;: &quot;index.js&quot;,</span></span>
<span class="line"><span>    &quot;scripts&quot;：{</span></span>
<span class="line"><span>        &quot;test&quot;:&quot;echo \\&quot;Error： no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &quot;dependencies&quot;: {}</span></span>
<span class="line"><span>    &quot;devDependencies&quot;：{}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_3-创建-npmignore-文件" tabindex="-1">3. 创建.npmignore 文件 <a class="header-anchor" href="#_3-创建-npmignore-文件" aria-label="Permalink to &quot;3. 创建.npmignore 文件&quot;">​</a></h2><p>创建一个 <code>.npmignore</code> 文件来排除发布时不需要的文件。这类似于 .gitignore 文件。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node modules</span></span>
<span class="line"><span>*.1og</span></span>
<span class="line"><span>*•swp</span></span>
<span class="line"><span>*.bak</span></span></code></pre></div><h2 id="_4-登录-npm-账户" tabindex="-1">4. 登录 NPM 账户 <a class="header-anchor" href="#_4-登录-npm-账户" aria-label="Permalink to &quot;4. 登录 NPM 账户&quot;">​</a></h2><p>在终端中运行 <code>npm login</code> 命令，并输入你的 NPM 账户名、密码和邮箱。如果还没有账户，可以通过运行 npm adduser 创建一个。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm login</span></span></code></pre></div><h2 id="_5-发布包" tabindex="-1">5. 发布包 <a class="header-anchor" href="#_5-发布包" aria-label="Permalink to &quot;5. 发布包&quot;">​</a></h2><p>运行以下命令发布你的包到 NPM:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm publish</span></span></code></pre></div><p>发布成功后，你会在终端看到类似的输出信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>+ your-package-name@1.0.0</span></span></code></pre></div><p>撤回垃圾包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm unpublish -f </span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm unpublish +包+版本号 -f</span></span>
<span class="line"><span>如：npm unpublish qe@1.0.0 - f</span></span></code></pre></div><h2 id="_6-确认发布" tabindex="-1">6. 确认发布 <a class="header-anchor" href="#_6-确认发布" aria-label="Permalink to &quot;6. 确认发布&quot;">​</a></h2><p>登录 NPM官网，进入你的个人主页，查看已发布的包。</p><h2 id="_7-更新和维护" tabindex="-1">7. 更新和维护 <a class="header-anchor" href="#_7-更新和维护" aria-label="Permalink to &quot;7. 更新和维护&quot;">​</a></h2><p>当你的包需要更新时，确保按照 Semantic Versioning 规范更新 <code>package.json</code> 文件中的版本号。然后重新执行 npm publish 命令发布新版本。</p><p>完成以上步骤后，你的包就成功发布到了 NPM。现在其他开发者可以通过 <code>npm install your-package-name</code> 命令安装你的包。</p><h1 id="cursor" tabindex="-1">cursor <a class="header-anchor" href="#cursor" aria-label="Permalink to &quot;cursor&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>command + k  描述要生成的代码</span></span>
<span class="line"><span>command + l  对话生成代码</span></span>
<span class="line"><span>shift + command + p 打开命令面板</span></span></code></pre></div><p>安装插件可以选择 <a href="https://open-vsx.org/" target="_blank" rel="noreferrer">https://open-vsx.org/</a> 网站安装</p>`,80),p=[t];function l(r,o,h,c,d,m){return s(),e("div",null,p)}const b=a(i,[["render",l]]);export{g as __pageData,b as default};
